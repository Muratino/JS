{"version":3,"file":"static/js/246.b8d6949d.chunk.js","mappings":"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","sources":["page/infoCountry/InfoCountry.jsx","service/FetchCountry.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\n// import { useSelector, useDispatch } from 'react-redux';\r\nimport { Container, Box, Button, Grid } from '@mui/material';\r\n// import { ErrorMessage } from '../../components/errorMessage/errorMessage';\r\n\r\nimport { FetchCountry } from '../../service/FetchCountry';\r\nimport Spinner from '../../components/spinner/Spinner'\r\n\r\nimport '../Home/Home.scss';\r\nimport './infoCountry.scss';\r\n\r\nfunction OneCountry() {\r\n    const { id } = useParams();\r\n\r\n    const { getCountryInfo } = FetchCountry();\r\n    const [country, setContry] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        updateCountry(id);\r\n    }, [])\r\n\r\n    const updateCountry = (i) => {\r\n        getCountryInfo(i)\r\n            .then(res => { onCountryLoaded(res); setLoading(false) });\r\n    }\r\n\r\n    const onCountryLoaded = (arr) => {\r\n        arr.map(elem => setContry(elem))\r\n\r\n    }\r\n\r\n    const loaded = loading ? <Spinner /> : <Vue info={country} />;\r\n\r\n    return (\r\n        <Container sx={{ maxWidth: { xl: 1200, sm: 480 }, marginTop: 4, marginBottom: 4 }} className='content'>\r\n            <Box sx={{ bgcolor: '#fff', padding: 4 }} className='cart'>\r\n                <div className=\"cart__box\">\r\n                    <h3 className='cart__text' >Country Information</h3>\r\n                    {loaded}\r\n                    <Link to='/'>\r\n                        <Button\r\n                            sx={{ padding: '5px 40px', marginTop: 9 }}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            size='large'>Back</Button>\r\n                    </Link>\r\n                </div>\r\n            </Box >\r\n        </Container >\r\n\r\n    );\r\n}\r\n\r\nconst Vue = ({ info }) => {\r\n    const { capital, coatOfArms, population, region, name, code, maps, flags } = info;\r\n    const allINfo = [{ value: capital, name: 'Name' }, { value: population, name: 'Population' }, { value: region, name: 'Region' }, { value: maps, name: 'Map sours' }];\r\n    // const [loaded, setLoaded] = useState(true);\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <div className=\"country\">\r\n                <Grid item xs={6} md={4}>\r\n                    <div className=\"country__right\">\r\n                        <img src={flags} alt={flags} />\r\n                        <div className=\"country__right-info\">\r\n                            <span>{name}</span>\r\n                            <span>â„– {code}</span>\r\n                        </div>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={6} md={8}>\r\n                    <div className=\"country__left\">\r\n                        {!coatOfArms ? <Spinner /> : <img src={coatOfArms} alt={coatOfArms} />}\r\n                        <div className=\"country__left-info\">\r\n                            {\r\n                                allINfo.map((elem, i) => {\r\n                                    return <span key={i}>{elem.name}: {elem.value}</span>\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </Grid>\r\n            </div>\r\n        </Grid>\r\n    );\r\n}\r\n\r\n\r\nexport default OneCountry;","import { useDispatch } from \"react-redux\";\r\nimport { setFounded } from \"../components/redux/slice/searchCountry\";\r\n\r\nexport const FetchCountry = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const _apiBase = 'https://restcountries.com/v3.1/';\r\n    const _apiAll = 'all';\r\n    const _apiName = 'name';\r\n\r\n    //https://restcountries.com/v3.1/all\r\n    const getResource = async (url) => {\r\n        let res = await fetch(url);\r\n        if (!res.ok) {\r\n            throw new Error(`Could not feth ${url}, status: ${res.status}`);\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    const getAllCountry = async () => {\r\n        const res = await getResource(`${_apiBase}${_apiAll}`);\r\n        return _transformAllCountry(res);\r\n    }\r\n\r\n    const getNameCountry = async (value) => {\r\n        if (!value) return\r\n        try {\r\n            const res = await getResource(`${_apiBase}${_apiName}/${value}`);\r\n            return _transformNameCountry(res);\r\n        } catch (err) {\r\n            console.log(err);\r\n            dispatch(setFounded(true));\r\n        }\r\n    }\r\n    // https://restcountries.com/v3.1/alpha/{code}\r\n    const getCountryInfo = async (code) => {\r\n        if (!code) {\r\n            return;\r\n        }\r\n        const res = await getResource(`${_apiBase}alpha/${code}`);\r\n        return _transformNameCountry(res);\r\n    }\r\n\r\n\r\n\r\n    const _transformAllCountry = (arr) => {\r\n        const country = [];\r\n        for (let index = 0; index < 6; index++) {\r\n            country.push(arr[index]);\r\n        }\r\n        return country\r\n    }\r\n\r\n\r\n    const _transformNameCountry = (arr) => {\r\n        return (\r\n            arr.map(el => {\r\n                return {\r\n                    capital: el.capital,\r\n                    coatOfArms: el.coatOfArms.png,\r\n                    population: el.population,\r\n                    region: el.region,\r\n                    name: el.name.official,\r\n                    code: el.ccn3,\r\n                    maps: el.maps.googleMaps,\r\n                    flags: el.flags.png\r\n                };\r\n            })\r\n        )\r\n    }\r\n\r\n    return { getAllCountry, getNameCountry, getCountryInfo };\r\n}\r\n"],"names":["Vue","info","capital","coatOfArms","population","region","name","code","maps","flags","allINfo","value","Grid","container","spacing","className","item","xs","md","src","alt","Spinner","map","elem","i","id","useParams","getCountryInfo","FetchCountry","useState","country","setContry","loading","setLoading","useEffect","updateCountry","then","res","onCountryLoaded","arr","loaded","Container","sx","maxWidth","xl","sm","marginTop","marginBottom","Box","bgcolor","padding","to","Button","variant","color","size","dispatch","useDispatch","_apiBase","getResource","url","fetch","ok","Error","status","json","getAllCountry","_transformAllCountry","getNameCountry","_transformNameCountry","console","log","setFounded","index","push","el","png","official","ccn3","googleMaps"],"sourceRoot":""}