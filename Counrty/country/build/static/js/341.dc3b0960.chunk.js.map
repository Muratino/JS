{"version":3,"file":"static/js/341.dc3b0960.chunk.js","mappings":"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","sources":["components/search/Search.jsx","components/Skeleton/Skeleton.jsx","components/cart/Cart.jsx","components/errorMessage/errorMessage.js","page/Home/Home.jsx","service/FetchCountry.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useState, useRef, useCallback } from 'react';\r\nimport { TextField, Box } from '@mui/material';\r\nimport debounce from 'lodash.debounce';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setChangeInput } from '../redux/slice/searchCountry';\r\n\r\nimport '../../page/Home/Home.scss';\r\n\r\nfunction Search() {\r\n    const dispatch = useDispatch();\r\n    const [valueRed, setValueRed] = useState('');\r\n\r\n    const focusRef = useRef();\r\n\r\n    const testDebounce = useCallback(\r\n        debounce((str) => {\r\n            dispatch(setChangeInput(str));\r\n        }, 500),\r\n        [],\r\n    );\r\n\r\n    const onClear = () => {\r\n        dispatch(setChangeInput(''));\r\n        setValueRed('');\r\n        focusRef.current.focus();\r\n    }\r\n\r\n    if (!valueRed) {\r\n        localStorage.clear();\r\n    }\r\n\r\n    const onFocus = (e) => {\r\n        const target = e.target.value;\r\n        setValueRed(target)\r\n        testDebounce(target)\r\n        localStorage.setItem('value', target)\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ bgcolor: '#fff' }} className='header'>\r\n            <div className=\"header__box\">\r\n                <h2 className='header__text'>World Search</h2>\r\n                <div className=\"header__input\">\r\n                    <TextField\r\n                        ref={focusRef}\r\n                        value={valueRed}\r\n                        onChange={onFocus}\r\n                        className='header__label'\r\n                        color=\"secondary\"\r\n                        id=\"outlined-basic\"\r\n                        label=\"Country search\"\r\n                        variant=\"outlined\"\r\n                        size=\"small\" />\r\n                    {\r\n                        valueRed ? <img onClick={onClear} src='./icon/xmark-solid.svg' alt=\"x\" /> : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport ContentLoader from \"react-content-loader\";\r\n\r\nfunction Skeleton() {\r\n    return (\r\n        Array.from(Array(6)).map((_, index) => (\r\n            <ContentLoader key={index}\r\n                speed={5}\r\n                width={229}\r\n                height={200}\r\n                viewBox=\"0 0 229 200\"\r\n                backgroundColor=\"#e1dfdf\"\r\n                foregroundColor=\"#ecebeb\"\r\n            >\r\n                <rect x=\"0\" y=\"277\" rx=\"7\" ry=\"7\" width=\"280\" height=\"15\" />\r\n                <rect x=\"315\" y=\"378\" rx=\"0\" ry=\"0\" width=\"265\" height=\"118\" />\r\n                <rect x=\"0\" y=\"0\" rx=\"7\" ry=\"7\" width=\"229\" height=\"120\" />\r\n                <rect x=\"0\" y=\"409\" rx=\"7\" ry=\"7\" width=\"123\" height=\"30\" />\r\n                <rect x=\"156\" y=\"409\" rx=\"7\" ry=\"7\" width=\"123\" height=\"30\" />\r\n                <rect x=\"0\" y=\"127\" rx=\"10\" ry=\"10\" width=\"229\" height=\"19\" />\r\n                <rect x=\"0\" y=\"152\" rx=\"10\" ry=\"10\" width=\"229\" height=\"19\" />\r\n                <rect x=\"0\" y=\"179\" rx=\"10\" ry=\"10\" width=\"229\" height=\"19\" />\r\n            </ContentLoader>\r\n        ))\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Grid } from '@mui/material';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { FetchCountry } from '../../service/FetchCountry';\r\nimport Skeleton from '../Skeleton/Skeleton';\r\n\r\nimport { inputSelect } from '../redux/slice/searchCountry';\r\n\r\nimport './Cart.scss';\r\n\r\nfunction Cart() {\r\n\r\n    const { changeInput } = useSelector(inputSelect);\r\n\r\n    const { getNameCountry } = FetchCountry();\r\n    const [oneCountry, setOneCountry] = useState([]);\r\n    // const [skeleton, setSkeleton] = useState(true);\r\n\r\n\r\n    const getName = (str) => {\r\n        const local = localStorage.getItem('value')\r\n        if (local) {\r\n            getNameCountry(local)\r\n                .then(res => setOneCountry(res));\r\n        } else {\r\n            getNameCountry(str)\r\n                .then(res => setOneCountry(res));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getName(changeInput)\r\n    }, [changeInput])\r\n\r\n    const creatCart = (arr) => {\r\n        return (\r\n            arr.map(elem => {\r\n                return (\r\n                    <li key={elem.code} className=\"cart__item\">\r\n                        <Link to={`/oneCountry/${elem.code}`}>\r\n                            <img src={elem.flags} alt={elem.name} />\r\n                            <div className=\"cart__item-text\">\r\n                                <span className=\"cart__item-text-name\">{elem.name}</span>\r\n                                <span className=\"cart__item-text-code\">â„– {elem.code}</span>\r\n                            </div>\r\n                        </Link>\r\n                    </li>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n    const carts = oneCountry ? creatCart(oneCountry) : <Skeleton />;\r\n\r\n    return (\r\n        <ul className='cart__ul'>\r\n            {carts}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Cart;\r\n","import error from './error.gif'\r\n\r\nexport const ErrorMessage = () => {\r\n    return (\r\n        <img \r\n            style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} \r\n            src={error} \r\n            alt='error'/>\r\n    );\r\n\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Container, Box } from '@mui/material';\r\n\r\nimport Search from '../../components/search/Search';\r\nimport Cart from '../../components/cart/Cart';\r\nimport { inputSelect } from '../../components/redux/slice/searchCountry';\r\nimport { ErrorMessage } from '../../components/errorMessage/errorMessage';\r\n\r\nimport './Home.scss';\r\n\r\nfunction Home() {\r\n    const { notFounded } = useSelector(inputSelect);\r\n\r\n    const creatError = () => {\r\n        return (\r\n            <>\r\n                <ErrorMessage />\r\n                <span className=\"cart__box-err\" >Country not found</span>\r\n            </>\r\n        )\r\n    }\r\n    const notFoundedElem = notFounded ? creatError() : <Cart />;\r\n\r\n    return (\r\n        <Container sx={{ maxWidth: { xl: 1200, sm: 480 }, marginTop: 4, marginBottom: 4 }} className='content'>\r\n            <Search />\r\n            <Box sx={{ bgcolor: '#fff', padding: 4 }} className='cart'>\r\n                <div className=\"cart__box\">\r\n                    <h3 className='cart__text' >List of country</h3>\r\n                    {notFoundedElem}\r\n                </div>\r\n            </Box >\r\n        </Container >\r\n    );\r\n}\r\n\r\nexport default Home;","import { useDispatch } from \"react-redux\";\r\nimport { setFounded } from \"../components/redux/slice/searchCountry\";\r\n\r\nexport const FetchCountry = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const _apiBase = 'https://restcountries.com/v3.1/';\r\n    const _apiAll = 'all';\r\n    const _apiName = 'name';\r\n\r\n    //https://restcountries.com/v3.1/all\r\n    const getResource = async (url) => {\r\n        let res = await fetch(url);\r\n        if (!res.ok) {\r\n            throw new Error(`Could not feth ${url}, status: ${res.status}`);\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    const getAllCountry = async () => {\r\n        const res = await getResource(`${_apiBase}${_apiAll}`);\r\n        return _transformAllCountry(res);\r\n    }\r\n\r\n    const getNameCountry = async (value) => {\r\n        if (!value) return\r\n        try {\r\n            const res = await getResource(`${_apiBase}${_apiName}/${value}`);\r\n            return _transformNameCountry(res);\r\n        } catch (err) {\r\n            console.log(err);\r\n            dispatch(setFounded(true));\r\n        }\r\n    }\r\n    // https://restcountries.com/v3.1/alpha/{code}\r\n    const getCountryInfo = async (code) => {\r\n        if (!code) {\r\n            return;\r\n        }\r\n        const res = await getResource(`${_apiBase}alpha/${code}`);\r\n        return _transformNameCountry(res);\r\n    }\r\n\r\n\r\n\r\n    const _transformAllCountry = (arr) => {\r\n        const country = [];\r\n        for (let index = 0; index < 6; index++) {\r\n            country.push(arr[index]);\r\n        }\r\n        return country\r\n    }\r\n\r\n\r\n    const _transformNameCountry = (arr) => {\r\n        return (\r\n            arr.map(el => {\r\n                return {\r\n                    capital: el.capital,\r\n                    coatOfArms: el.coatOfArms.png,\r\n                    population: el.population,\r\n                    region: el.region,\r\n                    name: el.name.official,\r\n                    code: el.ccn3,\r\n                    maps: el.maps.googleMaps,\r\n                    flags: el.flags.png\r\n                };\r\n            })\r\n        )\r\n    }\r\n\r\n    return { getAllCountry, getNameCountry, getCountryInfo };\r\n}\r\n"],"names":["dispatch","useDispatch","useState","valueRed","setValueRed","focusRef","useRef","testDebounce","useCallback","debounce","str","setChangeInput","localStorage","clear","Box","sx","bgcolor","className","TextField","ref","value","onChange","e","target","setItem","color","id","label","variant","size","onClick","current","focus","src","alt","Array","from","map","_","index","speed","width","height","viewBox","backgroundColor","foregroundColor","x","y","rx","ry","changeInput","useSelector","inputSelect","getNameCountry","FetchCountry","oneCountry","setOneCountry","useEffect","local","getItem","then","res","getName","carts","elem","to","code","flags","name","ErrorMessage","style","display","objectFit","margin","error","notFoundedElem","notFounded","Container","maxWidth","xl","sm","marginTop","marginBottom","padding","_apiBase","getResource","url","fetch","ok","Error","status","json","getAllCountry","_transformAllCountry","_transformNameCountry","console","log","setFounded","getCountryInfo","arr","country","push","el","capital","coatOfArms","png","population","region","official","ccn3","maps","googleMaps"],"sourceRoot":""}